[
  {
    "objectID": "quarto_website.html",
    "href": "quarto_website.html",
    "title": "Quarto Website Demo",
    "section": "",
    "text": "Quarto is a publishing system that allows you to weave together content and executable code into a finished document using R, Python, Julia, and ObservableJS, with plans to add more languages. You can thing of Quarto as an extension of R Markdown, but with more features and additional languages. R Markdown is still under active development and is not going anywhere, however many in the data science realm are switching to Quarto instead.\nYou may notice if you open this lesson in in R Studio, while it is a .qmd document it looks and functions nearly identical to a .Rmd document! Therefore your knowledge of R Markdown is easily transferable to Quarto.\n\n\n\nArtwork from “Hello, Quarto” keynote by Julia Lowndes and Mine Çetinkaya-Rundel, presented at RStudio Conference 2022. Illustrated by Allison Horst.\n\n\n\nQuarto operates as a stand-alone software, however with RStudio v2022.07.1 + Quarto is included, therefore there is no need to separately install Quarto if you have the latest version of RStudio.\n\n\n\n\nThere are plenty of R-based options to create a personal website such as blogdown and distill, however I’ve found creating a website in Quarto is more simple/straightforward in terms of file structure and publishing. This is not to say you shouldn’t consider the other options! I made my personal website in blogdown for example (code can be found here), but this was well before Quarto existed and I have since found websites in Quarto to be slightly easier to teach. So that is what we will work through today!\nNote: A lot of this tutorial is based off this blog post: https://ucsb-meds.github.io/creating-quarto-websites/. I also recommend checking this out as it has a lot more details and resources!\n\n\n\nThe structure of Quarto websites is actually nearly identical to that of R Projects (and they actually create an .Rproj file when you create the website). Let’s get started:\nGo to File -&gt; New Project -&gt; New Directory -&gt; Quarto Website. Name is important here, as it will eventually become the slug (i.e., URL) for your site when we host it with GitHub Pages. Since this is a demo, I will call it ‘website-demo’.\n\n[!NOTE] If you already know you want this to be your personal website, name it YourGitHubUsername.github.io. GitHub Pages creates websites with the github.io suffix, and allow you one URL with your username (i.e., username.github.io), which is likely the preferred URL you would want to give your personal site.\n\nLeave all the other defaults in the Create Website menu. Once you create the site, you will now notice you are working in an R Project with the site name you just gave it, and see four files in your project directory (We will get back to these later).\n\n\n\nWe now have a Quarto website project, but it is not yet linked to GitHub (which we will need to host the site). Let’s explore a package you likely used during your R/GitHub set up process, usethis, which assists in project workflow management. With this package we can actually create a GitHub repo from an R project (instead of the usual method of creating a repo first and then creating a project).\nIf you haven’t yet, install the package:\ninstall.packages(\"usethis\")\nThen, in the console (double check you are in your Quarto R Project) run the follow line of code. It will prompt you if you want to commit all your files, say Yup. It will then ask if you want to Restart R, say “Absolutely”, and click ‘Yes’ to restart even if prompted that the session is busy.\nusethis::use_git()\nYou will now notice the ‘Git’ tab in RStudio, meaning it is connected to Git now, however we haven’t synced this to your personal (remote) GitHub repo. To do so, next run this line of code in the console:\nusethis::use_github()\n\n\n\nFirst there are some mandatory configurations to set in order to publish with GitHub Pages. Carry out the following steps in order:\n\ntouch .nojekyll\nCreate a file named .nojekyll . Spelling is important! Also note that this creates an empty file that will be hidden in your file directory but it will show up as an untracked file in Git. Open your terminal and run the following:\ntouch .nojekyll\nIn the YAML header in the _quarto.yml file set the output-dir to “docs” like this in the first ‘project’ section at the top under type: website :\nproject:\n  type: website\n  output-dir: docs\nNow Build your site by clicking on the Build tab (top right quadrant in RStudio next to the ‘Git’ tab), and click Render Website. You should see a minimal website appear in either the Viewer tab or a separate window (depending on your RStudio settings). You can click the send to browser Icon to view it in the web browser.\n\nGreat, you now have a functional website! However it is not hosted publicly yet. In the next steps we will go to GitHub to set up our GitHub Pages site.\nBUT FIRST! You need to push all of your files to GitHub.\n\nStage all files by using git add ., then commit and push everything.\nNext, go to your GitHub account and navigate to the repo you made for this website. Click Settings and then Pages on the left hand side navigation bar.\nUnder Branch click the drop down menu and choose main/master branch, then choose the docs/ folder (like the image below) and click Save.\n\n\nWait a minute or so and then refresh the page. You will then see the new URL created for your site. You can now navigate to and share this URL to access your site!\nUpdating your site:\n\nNow every time you edit your website, click ‘Render Website’ in RStudio, then push all changed files (always use git add . with Quarto websites), and your site will automatically update as well after you push (it may just take a few minutes to see the changes).\n\nAlso, below in settings you will see an option to add a custom domain. If you purchase your own domain name (for example, I purchased caitlinmothes.com) you can then link that domain name here to use to navigate to your site.\n\n\n\nGetting the website template up and hosted may likely be the hardest part of creating a Quarto website. Now we can start customizing!\nNOTE: Before you get started adding any new content, there are two very important things:\n\nDon’t touch the docs/ folder! Don’t ask why, just don’t do it.\nYou must Render Website (in the Build tab) before pushing your website changes (this updates the docs/ folder which GitHub pages builds the website from)\n\n\n\nAll edits to your homepage go in the index.qmd file. Since we are making personal websites here, a big edit we can make is changing this to an “About” page. All edits will go in the YAML header of index.qmd. We will change/add title: (your name), image: (file path to an image, note that this should be in the root directory of the website), and numerous arguments under about: such as layout style (see options here), image aesthetics and links to social media/contact accounts.\nEdit the following code below to match your personal information and paste it in the YAML header of index.qmd.\nFor this example, I am creating a website for my cute dog Kona.\ntitle: \"Kona Dog\"\nimage: kona.png\nabout: \n  template: trestles\n  image-shape: rounded\n  image-width: 15em\n  links:\n    - text: LinkedIn\n      href: https://www.linkedin.com/in/konadog/\n    - text: Twitter\n      href: https://twitter.com/konadog\n    - text: GitHub\n      href: https://github.com/konadog\n    - text: Email\n      href: mailto:konadog@colostate.edu\nAfter saving the index.qmd file with your changes, click ‘Render Website’ to view the changes to the homepage.\nRemember: your site will not be updated until you Render Website and push all changes to GitHub. You can edit and ‘Render Website’ as much as you want in your R Session to view changes.\nNow let’s change the content to the right of our photo. In the main body of index.qmd, delete the template text and add whatever information you want (such as an intro, education, job titles). Note that using --- in the Source Editor of a Quarto document will add line dividers. Edit the rest of the text as you would in the Visual Editor.\n\n\n\nThe process of adding more pages to your site is:\n\nCreate a new .qmd with the content you want and save it in the root directory. To do so go to File -&gt; New File -&gt; Quarto Document. Keep the output as HTML, but edit everything else as you want.\nUpdate the _quarto.yml by adding the name of the new .qmd to the list of pages\n\nFor example I created a .qmd called (quarto-lesson.qmd). If you are new to Quarto, you can edit this file exactly like you would edit or code in a .Rmd R Markdown file.\nOnce I edit and save the file, I would add quarto-lesson.qmd in the _quarto.yml file under the about.qmd file. You can edit the title of this page in the navigation bar by adding a text: argument, otherwise it will automatically use the document title. For example my new _quarto.yml file looks like this:\nproject:\n  type: website\n  output-dir: docs\n\nwebsite:\n  title: \"Kona Dog\"\n  navbar:\n    left:\n      - href: index.qmd\n        text: Home\n      - about.qmd\n      - quarto-lesson.qmd\n\nformat:\n  html:\n    theme: cosmo\n    css: styles.css\n    toc: true\n\neditor: visual\n\n\n\nLastly, you likely want to have more choice in the aesthetics of your site. You can easily do that by choosing from numerous built-in themes (view all 25 here) add adding the theme name to theme: under html: in format of your _quarto.yml file. You’ll notice the default theme is cosmo.\n\n\n\n\nOnce you have edited your site to your liking, remember to 1) Render Website and then 2) Push all changes to GitHub. Your site will update after a minute or so, and you can carry out this process whenever you want to edit or update your site.\n\n\nIf you’d like to see the website I created for this demonstration, its live at: https://ccmothes.github.io/website-demo/\n\n\n\n\n\nThanks to other blogs and Quarto documentation that helped guide this lesson plan, particularly this wonderful blog by Sam Csik."
  },
  {
    "objectID": "quarto_website.html#what-is-quarto",
    "href": "quarto_website.html#what-is-quarto",
    "title": "Quarto Website Demo",
    "section": "",
    "text": "Quarto is a publishing system that allows you to weave together content and executable code into a finished document using R, Python, Julia, and ObservableJS, with plans to add more languages. You can thing of Quarto as an extension of R Markdown, but with more features and additional languages. R Markdown is still under active development and is not going anywhere, however many in the data science realm are switching to Quarto instead.\nYou may notice if you open this lesson in in R Studio, while it is a .qmd document it looks and functions nearly identical to a .Rmd document! Therefore your knowledge of R Markdown is easily transferable to Quarto.\n\n\n\nArtwork from “Hello, Quarto” keynote by Julia Lowndes and Mine Çetinkaya-Rundel, presented at RStudio Conference 2022. Illustrated by Allison Horst.\n\n\n\nQuarto operates as a stand-alone software, however with RStudio v2022.07.1 + Quarto is included, therefore there is no need to separately install Quarto if you have the latest version of RStudio."
  },
  {
    "objectID": "quarto_website.html#why-build-a-website-in-quarto",
    "href": "quarto_website.html#why-build-a-website-in-quarto",
    "title": "Quarto Website Demo",
    "section": "",
    "text": "There are plenty of R-based options to create a personal website such as blogdown and distill, however I’ve found creating a website in Quarto is more simple/straightforward in terms of file structure and publishing. This is not to say you shouldn’t consider the other options! I made my personal website in blogdown for example (code can be found here), but this was well before Quarto existed and I have since found websites in Quarto to be slightly easier to teach. So that is what we will work through today!\nNote: A lot of this tutorial is based off this blog post: https://ucsb-meds.github.io/creating-quarto-websites/. I also recommend checking this out as it has a lot more details and resources!"
  },
  {
    "objectID": "quarto_website.html#getting-started",
    "href": "quarto_website.html#getting-started",
    "title": "Quarto Website Demo",
    "section": "",
    "text": "The structure of Quarto websites is actually nearly identical to that of R Projects (and they actually create an .Rproj file when you create the website). Let’s get started:\nGo to File -&gt; New Project -&gt; New Directory -&gt; Quarto Website. Name is important here, as it will eventually become the slug (i.e., URL) for your site when we host it with GitHub Pages. Since this is a demo, I will call it ‘website-demo’.\n\n[!NOTE] If you already know you want this to be your personal website, name it YourGitHubUsername.github.io. GitHub Pages creates websites with the github.io suffix, and allow you one URL with your username (i.e., username.github.io), which is likely the preferred URL you would want to give your personal site.\n\nLeave all the other defaults in the Create Website menu. Once you create the site, you will now notice you are working in an R Project with the site name you just gave it, and see four files in your project directory (We will get back to these later)."
  },
  {
    "objectID": "quarto_website.html#connect-to-github",
    "href": "quarto_website.html#connect-to-github",
    "title": "Quarto Website Demo",
    "section": "",
    "text": "We now have a Quarto website project, but it is not yet linked to GitHub (which we will need to host the site). Let’s explore a package you likely used during your R/GitHub set up process, usethis, which assists in project workflow management. With this package we can actually create a GitHub repo from an R project (instead of the usual method of creating a repo first and then creating a project).\nIf you haven’t yet, install the package:\ninstall.packages(\"usethis\")\nThen, in the console (double check you are in your Quarto R Project) run the follow line of code. It will prompt you if you want to commit all your files, say Yup. It will then ask if you want to Restart R, say “Absolutely”, and click ‘Yes’ to restart even if prompted that the session is busy.\nusethis::use_git()\nYou will now notice the ‘Git’ tab in RStudio, meaning it is connected to Git now, however we haven’t synced this to your personal (remote) GitHub repo. To do so, next run this line of code in the console:\nusethis::use_github()"
  },
  {
    "objectID": "quarto_website.html#configure-and-publish-with-github-pages",
    "href": "quarto_website.html#configure-and-publish-with-github-pages",
    "title": "Quarto Website Demo",
    "section": "",
    "text": "First there are some mandatory configurations to set in order to publish with GitHub Pages. Carry out the following steps in order:\n\ntouch .nojekyll\nCreate a file named .nojekyll . Spelling is important! Also note that this creates an empty file that will be hidden in your file directory but it will show up as an untracked file in Git. Open your terminal and run the following:\ntouch .nojekyll\nIn the YAML header in the _quarto.yml file set the output-dir to “docs” like this in the first ‘project’ section at the top under type: website :\nproject:\n  type: website\n  output-dir: docs\nNow Build your site by clicking on the Build tab (top right quadrant in RStudio next to the ‘Git’ tab), and click Render Website. You should see a minimal website appear in either the Viewer tab or a separate window (depending on your RStudio settings). You can click the send to browser Icon to view it in the web browser.\n\nGreat, you now have a functional website! However it is not hosted publicly yet. In the next steps we will go to GitHub to set up our GitHub Pages site.\nBUT FIRST! You need to push all of your files to GitHub.\n\nStage all files by using git add ., then commit and push everything.\nNext, go to your GitHub account and navigate to the repo you made for this website. Click Settings and then Pages on the left hand side navigation bar.\nUnder Branch click the drop down menu and choose main/master branch, then choose the docs/ folder (like the image below) and click Save.\n\n\nWait a minute or so and then refresh the page. You will then see the new URL created for your site. You can now navigate to and share this URL to access your site!\nUpdating your site:\n\nNow every time you edit your website, click ‘Render Website’ in RStudio, then push all changed files (always use git add . with Quarto websites), and your site will automatically update as well after you push (it may just take a few minutes to see the changes).\n\nAlso, below in settings you will see an option to add a custom domain. If you purchase your own domain name (for example, I purchased caitlinmothes.com) you can then link that domain name here to use to navigate to your site."
  },
  {
    "objectID": "quarto_website.html#customize-your-site",
    "href": "quarto_website.html#customize-your-site",
    "title": "Quarto Website Demo",
    "section": "",
    "text": "Getting the website template up and hosted may likely be the hardest part of creating a Quarto website. Now we can start customizing!\nNOTE: Before you get started adding any new content, there are two very important things:\n\nDon’t touch the docs/ folder! Don’t ask why, just don’t do it.\nYou must Render Website (in the Build tab) before pushing your website changes (this updates the docs/ folder which GitHub pages builds the website from)\n\n\n\nAll edits to your homepage go in the index.qmd file. Since we are making personal websites here, a big edit we can make is changing this to an “About” page. All edits will go in the YAML header of index.qmd. We will change/add title: (your name), image: (file path to an image, note that this should be in the root directory of the website), and numerous arguments under about: such as layout style (see options here), image aesthetics and links to social media/contact accounts.\nEdit the following code below to match your personal information and paste it in the YAML header of index.qmd.\nFor this example, I am creating a website for my cute dog Kona.\ntitle: \"Kona Dog\"\nimage: kona.png\nabout: \n  template: trestles\n  image-shape: rounded\n  image-width: 15em\n  links:\n    - text: LinkedIn\n      href: https://www.linkedin.com/in/konadog/\n    - text: Twitter\n      href: https://twitter.com/konadog\n    - text: GitHub\n      href: https://github.com/konadog\n    - text: Email\n      href: mailto:konadog@colostate.edu\nAfter saving the index.qmd file with your changes, click ‘Render Website’ to view the changes to the homepage.\nRemember: your site will not be updated until you Render Website and push all changes to GitHub. You can edit and ‘Render Website’ as much as you want in your R Session to view changes.\nNow let’s change the content to the right of our photo. In the main body of index.qmd, delete the template text and add whatever information you want (such as an intro, education, job titles). Note that using --- in the Source Editor of a Quarto document will add line dividers. Edit the rest of the text as you would in the Visual Editor.\n\n\n\nThe process of adding more pages to your site is:\n\nCreate a new .qmd with the content you want and save it in the root directory. To do so go to File -&gt; New File -&gt; Quarto Document. Keep the output as HTML, but edit everything else as you want.\nUpdate the _quarto.yml by adding the name of the new .qmd to the list of pages\n\nFor example I created a .qmd called (quarto-lesson.qmd). If you are new to Quarto, you can edit this file exactly like you would edit or code in a .Rmd R Markdown file.\nOnce I edit and save the file, I would add quarto-lesson.qmd in the _quarto.yml file under the about.qmd file. You can edit the title of this page in the navigation bar by adding a text: argument, otherwise it will automatically use the document title. For example my new _quarto.yml file looks like this:\nproject:\n  type: website\n  output-dir: docs\n\nwebsite:\n  title: \"Kona Dog\"\n  navbar:\n    left:\n      - href: index.qmd\n        text: Home\n      - about.qmd\n      - quarto-lesson.qmd\n\nformat:\n  html:\n    theme: cosmo\n    css: styles.css\n    toc: true\n\neditor: visual\n\n\n\nLastly, you likely want to have more choice in the aesthetics of your site. You can easily do that by choosing from numerous built-in themes (view all 25 here) add adding the theme name to theme: under html: in format of your _quarto.yml file. You’ll notice the default theme is cosmo."
  },
  {
    "objectID": "quarto_website.html#finalize-your-site",
    "href": "quarto_website.html#finalize-your-site",
    "title": "Quarto Website Demo",
    "section": "",
    "text": "Once you have edited your site to your liking, remember to 1) Render Website and then 2) Push all changes to GitHub. Your site will update after a minute or so, and you can carry out this process whenever you want to edit or update your site.\n\n\nIf you’d like to see the website I created for this demonstration, its live at: https://ccmothes.github.io/website-demo/"
  },
  {
    "objectID": "quarto_website.html#acknowledgements",
    "href": "quarto_website.html#acknowledgements",
    "title": "Quarto Website Demo",
    "section": "",
    "text": "Thanks to other blogs and Quarto documentation that helped guide this lesson plan, particularly this wonderful blog by Sam Csik."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Alan Cai",
    "section": "",
    "text": "Hello! I am a PhD student in the Watershed Sciences program at Colorado State University - Fort Collins. I am interested in the conservation and restoration of aquatic ecosystems. I am a member of the Landscape Modeling research group of Dr. Jessica O’Connell, and I study tidal marsh dynamics and resilience focusing on sites on Sapelo Island, Georgia. Previously, I worked on wet meadow restoration monitoring in California, and researched the ecological management of Western U.S. rivers. I am excited to develop new insights about tidal marsh carbon cycling, flooding dynamics, and phenology. Additionally, I was the Graduate Student member on the UCOWR (Universities Council on Water Resources) Board of Directors from 2023-2024."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Aquatic ecosystems, remote sensing, wetland ecology, restoration ecology, coupled human-environment systems, environmental policy and management, climate change impacts and resilience"
  },
  {
    "objectID": "about.html#interests",
    "href": "about.html#interests",
    "title": "About",
    "section": "",
    "text": "Aquatic ecosystems, remote sensing, wetland ecology, restoration ecology, coupled human-environment systems, environmental policy and management, climate change impacts and resilience"
  },
  {
    "objectID": "about.html#education",
    "href": "about.html#education",
    "title": "About",
    "section": "Education",
    "text": "Education\nPh.D. in Watershed Science (2022 - present) Colorado State University – Fort Collins Topic: Remote sensing-driven modeling of tidal marsh accretion and ecology\nM.S. in Environmental Systems (2020) University of California, Merced Thesis: Environmental Flows Decision-making and Implementation at Hydropower Project Facilities in the Western United States\nB.S. in Environmental Sciences & B.A. in Atmospheric Science (2014) University of California, Berkeley"
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "Projects",
    "section": "",
    "text": "The accurate detection of flooding within remotely sensed images of tidal marshes serves several purposes, including filtering flooded pixels for analyses of marsh vegetation dynamics, and spatiotemporally quantifying flooding patterns (e.g. duration, extent, frequency, depth, tidal elevation). Previous research developed FLATS (Flooding in Landsat across tidal systems), a flooding detection algorithm in tidal marshes. FLATS developed a generalized linear model based on spectral band information from the Landsat 8 satellite, and ground-truthed by high frequency images taken by a surface-elevation digital camera. This research will help estimate the spatiotemporal patterns of tidal marsh flooding with finer resolution than is available through traditional datasets, such as the US national coastal tide gauge network.\nThe CMEM (Cohort Marsh Equilibrium Model) is a mechanistic model that estimates decadal-scale trajectories of marsh soil vertical accretion and SOC through simulation of relevant biophysical processes driving soil dynamics, including sediment trapping from tidal flows, primary production, and organic carbon decomposition. I will implement rCMEM within a coastal marsh area with a rich set of existing data for marsh evaluation, the Georgia Coastal Ecosystem Long-term Ecological Research (GCE-LTER), located on and around Sapelo Island, GA."
  }
]